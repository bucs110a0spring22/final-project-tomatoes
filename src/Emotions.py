import pygame
import random 

class Emotions(pygame.sprite.Sprite):
  def __init__(self, type, location):
    '''
    Initialize the type, location, and image of emotions
    args (str, tuple): Takes in the type and location that is randomly generated by generateEmotion.
    return: None
    '''
    pygame.sprite.Sprite.__init__(self)
    self.rect = location
    self.type = type
    self.blockDimension = (50,50)
    if type == "Happy":
      self.image = pygame.image.load("assets/Emotions/Happy.png")
    if type == "Sad":
      self.image = pygame.image.load("assets/Emotions/Sad.png")
    if type == "Angry":
      self.image = pygame.image.load("assets/Emotions/Angry.png")
    if type == "Scared":
      self.image = pygame.image.load("assets/Emotions/Scared.png")
    if type == "Excited":
      self.image = pygame.image.load("assets/Emotions/Excited.png")
    self.image = pygame.transform.smoothscale(self.image, self.blockDimension)
    
  @staticmethod #Allow the method to be called even before the object is made
  def generateEmotions():
    '''
    Randomly generate emotion types & coordinates 
    args: None
    return (tuple): Returns a tuple of the type and the location that can be used later.
    '''
    typePossible = ["Happy", "Sad", "Angry", "Scared", "Happy", "Sad", "Angry", "Scared", "Excited"]
    type = random.choice(typePossible)
    x = random.randrange(0,701,50)
    y = random.randrange(100,801,50)
    location = (x,y)
    return type, location

  def emotionEffects(self):
    '''
    Links the effects and points of emotions to the actual emotion itself.
    args: None
    return (str): Returns the points that's associated to each emotion
    '''
    rtrPoints = 0
    if self.type == "Sad":
      rtrPoints = -1
    elif self.type == "Excited":
      rtrPoints = 4
    else:
      rtrPoints = 1
    self.kill()
    return rtrPoints
    
      